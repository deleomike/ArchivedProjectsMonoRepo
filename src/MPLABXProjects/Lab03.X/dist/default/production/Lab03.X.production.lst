

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb  7 12:05:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1709
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    20                           	dabs	1,0x7E,2
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F1709 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  008C                     	;# 
    84  008D                     	;# 
    85  008E                     	;# 
    86  0091                     	;# 
    87  0092                     	;# 
    88  0093                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009B                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  0111                     	;# 
   105  0112                     	;# 
   106  0113                     	;# 
   107  0114                     	;# 
   108  0115                     	;# 
   109  0116                     	;# 
   110  0117                     	;# 
   111  0118                     	;# 
   112  0119                     	;# 
   113  011C                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  018E                     	;# 
   117  0191                     	;# 
   118  0191                     	;# 
   119  0192                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  0197                     	;# 
   126  0199                     	;# 
   127  0199                     	;# 
   128  0199                     	;# 
   129  019A                     	;# 
   130  019A                     	;# 
   131  019A                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019C                     	;# 
   138  019C                     	;# 
   139  019C                     	;# 
   140  019D                     	;# 
   141  019D                     	;# 
   142  019D                     	;# 
   143  019E                     	;# 
   144  019E                     	;# 
   145  019E                     	;# 
   146  019F                     	;# 
   147  019F                     	;# 
   148  019F                     	;# 
   149  019F                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  020D                     	;# 
   153  020E                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0215                     	;# 
   166  0216                     	;# 
   167  0216                     	;# 
   168  0217                     	;# 
   169  0217                     	;# 
   170  028C                     	;# 
   171  028D                     	;# 
   172  028E                     	;# 
   173  0291                     	;# 
   174  0291                     	;# 
   175  0292                     	;# 
   176  0293                     	;# 
   177  0293                     	;# 
   178  0298                     	;# 
   179  0298                     	;# 
   180  0299                     	;# 
   181  029A                     	;# 
   182  029A                     	;# 
   183  029E                     	;# 
   184  030C                     	;# 
   185  030D                     	;# 
   186  030E                     	;# 
   187  038C                     	;# 
   188  038D                     	;# 
   189  038E                     	;# 
   190  0391                     	;# 
   191  0392                     	;# 
   192  0393                     	;# 
   193  0394                     	;# 
   194  0395                     	;# 
   195  0396                     	;# 
   196  0397                     	;# 
   197  0398                     	;# 
   198  0399                     	;# 
   199  0415                     	;# 
   200  0416                     	;# 
   201  0417                     	;# 
   202  041C                     	;# 
   203  041D                     	;# 
   204  041E                     	;# 
   205  0511                     	;# 
   206  0515                     	;# 
   207  0617                     	;# 
   208  0618                     	;# 
   209  0619                     	;# 
   210  0619                     	;# 
   211  061A                     	;# 
   212  061B                     	;# 
   213  061C                     	;# 
   214  061C                     	;# 
   215  0691                     	;# 
   216  0692                     	;# 
   217  0693                     	;# 
   218  0694                     	;# 
   219  0695                     	;# 
   220  0696                     	;# 
   221  0697                     	;# 
   222  0698                     	;# 
   223  0699                     	;# 
   224  069A                     	;# 
   225  069B                     	;# 
   226  069C                     	;# 
   227  069D                     	;# 
   228  069E                     	;# 
   229  069F                     	;# 
   230  0E0F                     	;# 
   231  0E10                     	;# 
   232  0E11                     	;# 
   233  0E12                     	;# 
   234  0E13                     	;# 
   235  0E14                     	;# 
   236  0E15                     	;# 
   237  0E17                     	;# 
   238  0E20                     	;# 
   239  0E21                     	;# 
   240  0E22                     	;# 
   241  0E24                     	;# 
   242  0E25                     	;# 
   243  0E28                     	;# 
   244  0E29                     	;# 
   245  0E2A                     	;# 
   246  0E2B                     	;# 
   247  0E90                     	;# 
   248  0E91                     	;# 
   249  0E92                     	;# 
   250  0E94                     	;# 
   251  0E95                     	;# 
   252  0E9C                     	;# 
   253  0E9D                     	;# 
   254  0E9E                     	;# 
   255  0E9F                     	;# 
   256  0EA0                     	;# 
   257  0EA1                     	;# 
   258  0EA2                     	;# 
   259  0EA3                     	;# 
   260  0EA4                     	;# 
   261  0EA5                     	;# 
   262  0EA6                     	;# 
   263  0EA7                     	;# 
   264  0F0F                     	;# 
   265  0F10                     	;# 
   266  0F11                     	;# 
   267  0F12                     	;# 
   268  0F13                     	;# 
   269  0F14                     	;# 
   270  0F15                     	;# 
   271  0F16                     	;# 
   272  0F17                     	;# 
   273  0F18                     	;# 
   274  0F19                     	;# 
   275  0F1A                     	;# 
   276  0F1B                     	;# 
   277  0F1C                     	;# 
   278  0F1D                     	;# 
   279  0F1E                     	;# 
   280  0F1F                     	;# 
   281  0F20                     	;# 
   282  0F21                     	;# 
   283  0F22                     	;# 
   284  0F23                     	;# 
   285  0F24                     	;# 
   286  0F25                     	;# 
   287  0F26                     	;# 
   288  0F27                     	;# 
   289  0F28                     	;# 
   290  0F29                     	;# 
   291  0F2A                     	;# 
   292  0F2B                     	;# 
   293  0F2C                     	;# 
   294  0F2D                     	;# 
   295  0F9E                     	;# 
   296  0FE4                     	;# 
   297  0FE5                     	;# 
   298  0FE6                     	;# 
   299  0FE7                     	;# 
   300  0FE8                     	;# 
   301  0FE9                     	;# 
   302  0FEA                     	;# 
   303  0FEB                     	;# 
   304  0FED                     	;# 
   305  0FEE                     	;# 
   306  0FEF                     	;# 
   307                           
   308                           	psect	idataBANK0
   309  0283                     __pidataBANK0:	
   310                           
   311                           ;initializer for _select
   312  0283  3404               	retlw	4
   313                           
   314                           ;initializer for _time
   315  0284  3405               	retlw	5
   316  0285  3404               	retlw	4
   317  0286  3403               	retlw	3
   318  0287  3402               	retlw	2
   319                           
   320                           	psect	stringtext1
   321  01ED                     __pstringtext1:	
   322  01ED                     _segments:	
   323  01ED  3400               	retlw	0
   324  01EE  3400               	retlw	0
   325  01EF  3400               	retlw	0
   326  01F0  3400               	retlw	0
   327  01F1  3400               	retlw	0
   328  01F2  3400               	retlw	0
   329  01F3  3401               	retlw	1
   330  01F4  3401               	retlw	1
   331  01F5  3400               	retlw	0
   332  01F6  3400               	retlw	0
   333  01F7  3401               	retlw	1
   334  01F8  3401               	retlw	1
   335  01F9  3401               	retlw	1
   336  01FA  3401               	retlw	1
   337  01FB  3400               	retlw	0
   338  01FC  3400               	retlw	0
   339  01FD  3401               	retlw	1
   340  01FE  3400               	retlw	0
   341  01FF  3400               	retlw	0
   342  0200  3401               	retlw	1
   343  0201  3400               	retlw	0
   344  0202  3400               	retlw	0
   345  0203  3400               	retlw	0
   346  0204  3400               	retlw	0
   347  0205  3400               	retlw	0
   348  0206  3401               	retlw	1
   349  0207  3401               	retlw	1
   350  0208  3400               	retlw	0
   351  0209  3401               	retlw	1
   352  020A  3400               	retlw	0
   353  020B  3400               	retlw	0
   354  020C  3401               	retlw	1
   355  020D  3401               	retlw	1
   356  020E  3400               	retlw	0
   357  020F  3400               	retlw	0
   358  0210  3400               	retlw	0
   359  0211  3401               	retlw	1
   360  0212  3400               	retlw	0
   361  0213  3400               	retlw	0
   362  0214  3401               	retlw	1
   363  0215  3400               	retlw	0
   364  0216  3400               	retlw	0
   365  0217  3400               	retlw	0
   366  0218  3401               	retlw	1
   367  0219  3400               	retlw	0
   368  021A  3400               	retlw	0
   369  021B  3400               	retlw	0
   370  021C  3400               	retlw	0
   371  021D  3400               	retlw	0
   372  021E  3400               	retlw	0
   373  021F  3400               	retlw	0
   374  0220  3400               	retlw	0
   375  0221  3401               	retlw	1
   376  0222  3401               	retlw	1
   377  0223  3401               	retlw	1
   378  0224  3401               	retlw	1
   379  0225  3400               	retlw	0
   380  0226  3400               	retlw	0
   381  0227  3400               	retlw	0
   382  0228  3400               	retlw	0
   383  0229  3400               	retlw	0
   384  022A  3400               	retlw	0
   385  022B  3400               	retlw	0
   386  022C  3400               	retlw	0
   387  022D  3400               	retlw	0
   388  022E  3400               	retlw	0
   389  022F  3401               	retlw	1
   390  0230  3401               	retlw	1
   391  0231  3400               	retlw	0
   392  0232  3400               	retlw	0
   393  0233                     __end_of_segments:	
   394  000E                     _PORTCbits	set	14
   395  000D                     _PORTBbits	set	13
   396  0015                     _TMR0	set	21
   397  000C                     _PORTAbits	set	12
   398  005D                     _TMR0IE	set	93
   399  005A                     _TMR0IF	set	90
   400  005F                     _GIE	set	95
   401  008E                     _TRISC	set	142
   402  008D                     _TRISB	set	141
   403  008C                     _TRISA	set	140
   404  0095                     _OPTION_REGbits	set	149
   405  0099                     _OSCCONbits	set	153
   406  018E                     _ANSELC	set	398
   407  018D                     _ANSELB	set	397
   408  018C                     _ANSELA	set	396
   409  030E                     _SLRCONC	set	782
   410  030D                     _SLRCONB	set	781
   411  030C                     _SLRCONA	set	780
   412                           
   413                           ; #config settings
   414  0000                     
   415                           	psect	cinit
   416  0015                     start_initialization:	
   417  0015                     __initialization:	
   418                           
   419                           ; Initialize objects allocated to BANK0
   420  0015  3083               	movlw	low __pidataBANK0
   421  0016  0084               	movwf	4
   422  0017  3082               	movlw	(high __pidataBANK0)| (0+128)
   423  0018  0085               	movwf	5
   424  0019  0012               	moviw fsr0++
   425  001A  00A7               	movwf	__pdataBANK0& (0+127)
   426  001B  0012               	moviw fsr0++
   427  001C  00A8               	movwf	(__pdataBANK0+1)& (0+127)
   428  001D  0012               	moviw fsr0++
   429  001E  00A9               	movwf	(__pdataBANK0+2)& (0+127)
   430  001F  0012               	moviw fsr0++
   431  0020  00AA               	movwf	(__pdataBANK0+3)& (0+127)
   432  0021  0012               	moviw fsr0++
   433  0022  00AB               	movwf	(__pdataBANK0+4)& (0+127)
   434                           
   435                           ; Clear objects allocated to BANK0
   436  0023  01A0               	clrf	__pbssBANK0& (0+127)
   437  0024  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   438  0025  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   439  0026  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   440  0027  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   441  0028  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   442  0029  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   443  002A                     end_of_initialization:	
   444                           ;End of C runtime variable initialization code
   445                           
   446  002A                     __end_of__initialization:	
   447  002A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   448  002B  0020               	movlb	0
   449  002C  3181  2997         	ljmp	_main	;jump to C main() function
   450                           
   451                           	psect	bssBANK0
   452  0020                     __pbssBANK0:	
   453  0020                     _count:	
   454  0020                     	ds	2
   455  0022                     _sleep:	
   456  0022                     	ds	2
   457  0024                     _count_TIME:	
   458  0024                     	ds	1
   459  0025                     _count_SLEEPY_WALTERS:	
   460  0025                     	ds	1
   461  0026                     _count_WALTERS:	
   462  0026                     	ds	1
   463                           
   464                           	psect	dataBANK0
   465  0027                     __pdataBANK0:	
   466  0027                     _select:	
   467  0027                     	ds	1
   468  0028                     _time:	
   469  0028                     	ds	4
   470                           
   471                           	psect	cstackCOMMON
   472  0070                     __pcstackCOMMON:	
   473  0070                     ?_MCU_initialize:	
   474  0070                     ?_reset:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_set:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_Timer0Handler:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_main:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_ISR:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?i1_reset:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ??i1_reset:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?___wmul:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ___wmul@multiplier:	
   499                           ; 2 bytes @ 0x0
   500                           
   501                           
   502                           ; 2 bytes @ 0x0
   503  0070                     	ds	2
   504  0072                     ___wmul@multiplicand:	
   505                           
   506                           ; 2 bytes @ 0x2
   507  0072                     	ds	2
   508  0074                     ??___wmul:	
   509  0074                     ___wmul@product:	
   510                           ; 1 bytes @ 0x4
   511                           
   512                           
   513                           ; 2 bytes @ 0x4
   514  0074                     	ds	2
   515  0076                     ??_set:	
   516                           
   517                           ; 1 bytes @ 0x6
   518  0076                     	ds	5
   519  007B                     set@ledValue:	
   520                           
   521                           ; 1 bytes @ 0xB
   522  007B                     	ds	1
   523  007C                     ?_Display:	
   524  007C                     Display@digit:	
   525                           ; 1 bytes @ 0xC
   526                           
   527                           
   528                           ; 1 bytes @ 0xC
   529  007C                     	ds	1
   530  007D                     ??_Display:	
   531                           
   532                           ; 1 bytes @ 0xD
   533  007D                     	ds	1
   534                           
   535                           	psect	cstackBANK0
   536  002C                     __pcstackBANK0:	
   537  002C                     Display@num:	
   538                           
   539                           ; 1 bytes @ 0x0
   540  002C                     	ds	1
   541  002D                     ??_Timer0Handler:	
   542                           
   543                           ; 1 bytes @ 0x1
   544  002D                     	ds	1
   545  002E                     ??_ISR:	
   546                           
   547                           ; 1 bytes @ 0x2
   548  002E                     	ds	1
   549  002F                     ??_MCU_initialize:	
   550  002F                     ??_reset:	
   551                           ; 1 bytes @ 0x3
   552                           
   553  002F                     ??_main:	
   554                           ; 1 bytes @ 0x3
   555                           
   556                           
   557                           ; 1 bytes @ 0x3
   558  002F                     	ds	1
   559                           
   560                           	psect	maintext
   561  0197                     __pmaintext:	
   562 ;;
   563 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   564 ;;
   565 ;; *************** function _main *****************
   566 ;; Defined at:
   567 ;;		line 31 in file "lab03.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;		None
   570 ;; Auto vars:     Size  Location     Type
   571 ;;		None
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg, status,2, status,0, pclath, cstack
   576 ;; Tracked objects:
   577 ;;		On entry : B1F/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
   584 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
   585 ;;Total ram usage:        1 bytes
   586 ;; Hardware stack levels required when called:    7
   587 ;; This function calls:
   588 ;;		_MCU_initialize
   589 ;; This function is called by:
   590 ;;		Startup code after reset
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594                           
   595                           ;psect for function _main
   596  0197                     _main:	
   597                           
   598                           ;lab03.c: 33: MCU_initialize();
   599                           
   600                           ;incstack = 0
   601                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   602  0197  3182  2233  3181   	fcall	_MCU_initialize
   603                           
   604                           ;lab03.c: 35: (GIE = 1);
   605  019A  178B               	bsf	11,7	;volatile
   606  019B                     l838:	
   607                           ;lab03.c: 41: while(1) {
   608                           
   609                           
   610                           ;lab03.c: 44: if (PORTAbits.RA2 == 1) {
   611  019B  0020               	movlb	0	; select bank0
   612  019C  1D0C               	btfss	12,2	;volatile
   613  019D  29AC               	goto	l848
   614                           
   615                           ;lab03.c: 45: if (sleep[0] > 20){
   616  019E  3015               	movlw	21
   617  019F  0222               	subwf	_sleep,w
   618  01A0  1C03               	skipc
   619  01A1  29A7               	goto	l65
   620  01A2                     l66:	
   621                           ;lab03.c: 47: {}
   622                           
   623                           ;lab03.c: 46: while (PORTAbits.RA2 == 1)
   624                           
   625  01A2  190C               	btfsc	12,2	;volatile
   626  01A3  29A2               	goto	l66
   627                           
   628                           ;lab03.c: 48: sleep[0] = 0;
   629  01A4  01A2               	clrf	_sleep
   630                           
   631                           ;lab03.c: 49: sleep[1] = 0;
   632  01A5  01A3               	clrf	_sleep+1
   633                           
   634                           ;lab03.c: 50: }
   635  01A6  29AC               	goto	l848
   636  01A7                     l65:	
   637                           
   638                           ;lab03.c: 51: else{
   639                           ;lab03.c: 52: count_WALTERS = 1;
   640  01A7  01A6               	clrf	_count_WALTERS
   641  01A8  0AA6               	incf	_count_WALTERS,f
   642                           
   643                           ;lab03.c: 53: sleep[0] = 0;
   644  01A9  01A2               	clrf	_sleep
   645                           
   646                           ;lab03.c: 54: sleep[1] = 0;
   647  01AA  01A3               	clrf	_sleep+1
   648                           
   649                           ;lab03.c: 55: count_SLEEPY_WALTERS = 0;
   650  01AB  01A5               	clrf	_count_SLEEPY_WALTERS
   651  01AC                     l848:	
   652                           
   653                           ;lab03.c: 56: }
   654                           ;lab03.c: 57: }
   655                           ;lab03.c: 61: if (PORTAbits.RA4 == 1){
   656  01AC  1E0C               	btfss	12,4	;volatile
   657  01AD  29B7               	goto	l856
   658                           
   659                           ;lab03.c: 62: if (sleep[0] > 20){
   660  01AE  3015               	movlw	21
   661  01AF  0222               	subwf	_sleep,w
   662  01B0  1C03               	skipc
   663  01B1  29B4               	goto	l71
   664                           
   665                           ;lab03.c: 63: sleep[0] = 0;
   666  01B2  01A2               	clrf	_sleep
   667                           
   668                           ;lab03.c: 64: sleep[1] = 0;
   669  01B3  01A3               	clrf	_sleep+1
   670  01B4                     l71:	
   671                           
   672                           ;lab03.c: 65: }
   673                           ;lab03.c: 67: count_WALTERS = 0;
   674  01B4  01A6               	clrf	_count_WALTERS
   675                           
   676                           ;lab03.c: 68: count_SLEEPY_WALTERS = 1;
   677  01B5  01A5               	clrf	_count_SLEEPY_WALTERS
   678  01B6  0AA5               	incf	_count_SLEEPY_WALTERS,f
   679  01B7                     l856:	
   680                           
   681                           ;lab03.c: 70: }
   682                           ;lab03.c: 74: if (PORTAbits.RA5== 1)
   683  01B7  1E8C               	btfss	12,5	;volatile
   684  01B8  29C6               	goto	l866
   685                           
   686                           ;lab03.c: 75: {
   687                           ;lab03.c: 76: if (sleep[0] > 20){
   688  01B9  3015               	movlw	21
   689  01BA  0222               	subwf	_sleep,w
   690  01BB  1C03               	skipc
   691  01BC  29C0               	goto	l864
   692  01BD                     l74:	
   693                           ;lab03.c: 78: {}
   694                           
   695                           ;lab03.c: 77: while (PORTAbits.RA5 == 1)
   696                           
   697  01BD  1A8C               	btfsc	12,5	;volatile
   698  01BE  29BD               	goto	l74
   699  01BF  29C4               	goto	L1
   700  01C0                     l864:	
   701                           ;lab03.c: 81: }
   702                           
   703                           ;lab03.c: 80: sleep[1] = 0;
   704                           
   705                           ;lab03.c: 79: sleep[0] = 0;
   706                           
   707                           
   708                           ;lab03.c: 82: else{
   709                           ;lab03.c: 83: time[0]=0;
   710  01C0  01A8               	clrf	_time
   711                           
   712                           ;lab03.c: 84: time[1]=0;
   713  01C1  01A9               	clrf	_time+1
   714                           
   715                           ;lab03.c: 85: time[2]=0;
   716  01C2  01AA               	clrf	_time+2
   717                           
   718                           ;lab03.c: 86: time[3]=0;
   719  01C3  01AB               	clrf	_time+3
   720  01C4                     L1:	
   721                           
   722                           ;lab03.c: 87: sleep[0] = 0;
   723  01C4  01A2               	clrf	_sleep
   724                           
   725                           ;lab03.c: 88: sleep[1] = 0;
   726  01C5  01A3               	clrf	_sleep+1
   727  01C6                     l866:	
   728                           ;lab03.c: 91: else{}
   729                           
   730                           ;lab03.c: 89: }
   731                           ;lab03.c: 90: }
   732                           
   733                           
   734                           ;lab03.c: 115: if (time[3] == 10)
   735  01C6  300A               	movlw	10
   736  01C7  062B               	xorwf	_time+3,w
   737  01C8  1D03               	btfss	3,2
   738  01C9  29D1               	goto	l872
   739                           
   740                           ;lab03.c: 116: {
   741                           ;lab03.c: 117: time[2] = time[2]+ count_WALTERS;
   742  01CA  082A               	movf	_time+2,w
   743  01CB  0726               	addwf	_count_WALTERS,w
   744  01CC  00AF               	movwf	??_main
   745  01CD  082F               	movf	??_main,w
   746  01CE  00AA               	movwf	_time+2
   747                           
   748                           ;lab03.c: 118: time[3] = 0;
   749  01CF  01AB               	clrf	_time+3
   750                           
   751                           ;lab03.c: 119: }
   752  01D0  299B               	goto	l838
   753  01D1                     l872:	
   754                           
   755                           ;lab03.c: 120: else if (time[2] == 10){
   756  01D1  300A               	movlw	10
   757  01D2  062A               	xorwf	_time+2,w
   758  01D3  1D03               	btfss	3,2
   759  01D4  29DC               	goto	l878
   760                           
   761                           ;lab03.c: 121: time[2] = 0;
   762  01D5  01AA               	clrf	_time+2
   763                           
   764                           ;lab03.c: 122: time[1] = time[1] + count_WALTERS;
   765  01D6  0829               	movf	_time+1,w
   766  01D7  0726               	addwf	_count_WALTERS,w
   767  01D8  00AF               	movwf	??_main
   768  01D9  082F               	movf	??_main,w
   769  01DA  00A9               	movwf	_time+1
   770                           
   771                           ;lab03.c: 123: }
   772  01DB  299B               	goto	l838
   773  01DC                     l878:	
   774                           
   775                           ;lab03.c: 124: else if (time[1] == 10){
   776  01DC  300A               	movlw	10
   777  01DD  0629               	xorwf	_time+1,w
   778  01DE  1D03               	btfss	3,2
   779  01DF  29E7               	goto	l884
   780                           
   781                           ;lab03.c: 125: time[1] = 0;
   782  01E0  01A9               	clrf	_time+1
   783                           
   784                           ;lab03.c: 126: time[0] = time[0] + count_WALTERS;
   785  01E1  0828               	movf	_time,w
   786  01E2  0726               	addwf	_count_WALTERS,w
   787  01E3  00AF               	movwf	??_main
   788  01E4  082F               	movf	??_main,w
   789  01E5  00A8               	movwf	_time
   790                           
   791                           ;lab03.c: 127: }
   792  01E6  299B               	goto	l838
   793  01E7                     l884:	
   794                           
   795                           ;lab03.c: 128: else if (time[0] == 6){
   796  01E7  3006               	movlw	6
   797  01E8  0628               	xorwf	_time,w
   798  01E9  1D03               	btfss	3,2
   799  01EA  299B               	goto	l838
   800                           
   801                           ;lab03.c: 129: time[0] = 0;
   802  01EB  01A8               	clrf	_time
   803  01EC  299B               	goto	l838
   804  01ED                     __end_of_main:	
   805                           
   806                           	psect	text1
   807  0233                     __ptext1:	
   808 ;; *************** function _MCU_initialize *****************
   809 ;; Defined at:
   810 ;;		line 143 in file "lab03.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;		None
   813 ;; Auto vars:     Size  Location     Type
   814 ;;		None
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, status,2, status,0, pclath, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   828 ;;Total ram usage:        0 bytes
   829 ;; Hardware stack levels used:    1
   830 ;; Hardware stack levels required when called:    6
   831 ;; This function calls:
   832 ;;		_reset
   833 ;; This function is called by:
   834 ;;		_main
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           
   839                           ;psect for function _MCU_initialize
   840  0233                     _MCU_initialize:	
   841                           
   842                           ;lab03.c: 146: OSCCONbits.IRCF = 14;
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in _MCU_initialize: [wreg+status,2+status,0+pclath+cstack]
   846  0233  0021               	movlb	1	; select bank1
   847  0234  0819               	movf	25,w	;volatile
   848  0235  3987               	andlw	-121
   849  0236  3870               	iorlw	112
   850  0237  0099               	movwf	25	;volatile
   851                           
   852                           ;lab03.c: 147: OSCCONbits.SPLLEN = 1;
   853  0238  1799               	bsf	25,7	;volatile
   854                           
   855                           ;lab03.c: 148: OSCCONbits.SCS = 0;
   856  0239  30FC               	movlw	-4
   857  023A  0599               	andwf	25,f	;volatile
   858                           
   859                           ;lab03.c: 150: OPTION_REGbits.TMR0CS = 0;
   860  023B  1295               	bcf	21,5	;volatile
   861                           
   862                           ;lab03.c: 151: OPTION_REGbits.PSA = 0;
   863  023C  1195               	bcf	21,3	;volatile
   864                           
   865                           ;lab03.c: 152: OPTION_REGbits.PS = 0b100;
   866  023D  0815               	movf	21,w	;volatile
   867  023E  39F8               	andlw	-8
   868  023F  3804               	iorlw	4
   869  0240  0095               	movwf	21	;volatile
   870                           
   871                           ;lab03.c: 154: TMR0 = 6;
   872  0241  3006               	movlw	6
   873  0242  0020               	movlb	0	; select bank0
   874  0243  0095               	movwf	21	;volatile
   875                           
   876                           ;lab03.c: 155: TMR0IF = 0;
   877  0244  110B               	bcf	11,2	;volatile
   878                           
   879                           ;lab03.c: 156: TMR0IE = 1;
   880  0245  168B               	bsf	11,5	;volatile
   881                           
   882                           ;lab03.c: 158: PORTBbits.RB7 = 0;
   883  0246  138D               	bcf	13,7	;volatile
   884                           
   885                           ;lab03.c: 159: PORTBbits.RB6 = 0;
   886  0247  130D               	bcf	13,6	;volatile
   887                           
   888                           ;lab03.c: 160: PORTBbits.RB5 = 0;
   889  0248  128D               	bcf	13,5	;volatile
   890                           
   891                           ;lab03.c: 161: PORTBbits.RB4 = 0;
   892  0249  120D               	bcf	13,4	;volatile
   893                           
   894                           ;lab03.c: 164: PORTCbits.RC7 = 1;
   895  024A  178E               	bsf	14,7	;volatile
   896                           
   897                           ;lab03.c: 178: ANSELA = 0b00000000;
   898  024B  0023               	movlb	3	; select bank3
   899  024C  018C               	clrf	12	;volatile
   900                           
   901                           ;lab03.c: 179: ANSELB = 0b00000000;
   902  024D  018D               	clrf	13	;volatile
   903                           
   904                           ;lab03.c: 180: ANSELC = 0b00000000;
   905  024E  018E               	clrf	14	;volatile
   906                           
   907                           ;lab03.c: 181: SLRCONA = 0b00000000;
   908  024F  0026               	movlb	6	; select bank6
   909  0250  018C               	clrf	12	;volatile
   910                           
   911                           ;lab03.c: 182: SLRCONB = 0b00000000;
   912  0251  018D               	clrf	13	;volatile
   913                           
   914                           ;lab03.c: 183: SLRCONC = 0b00000000;
   915  0252  018E               	clrf	14	;volatile
   916                           
   917                           ;lab03.c: 184: TRISA = 0b11111111;
   918  0253  30FF               	movlw	255
   919  0254  0021               	movlb	1	; select bank1
   920  0255  008C               	movwf	12	;volatile
   921                           
   922                           ;lab03.c: 185: TRISB = 0b00000000;
   923  0256  018D               	clrf	13	;volatile
   924                           
   925                           ;lab03.c: 186: TRISC = 0b00000000;
   926  0257  018E               	clrf	14	;volatile
   927                           
   928                           ;lab03.c: 189: reset();
   929  0258  3182  2288         	fcall	_reset
   930  025A  0008               	return
   931  025B                     __end_of_MCU_initialize:	
   932                           
   933                           	psect	text2
   934  0288                     __ptext2:	
   935 ;; *************** function _reset *****************
   936 ;; Defined at:
   937 ;;		line 199 in file "lab03.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		None
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   955 ;;Total ram usage:        0 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    5
   958 ;; This function calls:
   959 ;;		Nothing
   960 ;; This function is called by:
   961 ;;		_MCU_initialize
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           
   966                           ;psect for function _reset
   967  0288                     _reset:	
   968                           
   969                           ;lab03.c: 203: return;
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in _reset: []
   973  0288  0008               	return
   974  0289                     __end_of_reset:	
   975                           
   976                           	psect	intentry
   977  0004                     __pintentry:	
   978 ;; *************** function _ISR *****************
   979 ;; Defined at:
   980 ;;		line 246 in file "lab03.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
   997 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
   998 ;;Total ram usage:        1 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    4
  1001 ;; This function calls:
  1002 ;;		_Timer0Handler
  1003 ;; This function is called by:
  1004 ;;		Interrupt level 1
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008  0004                     _ISR:	
  1009                           
  1010                           ;incstack = 0
  1011  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1012                           
  1013                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1014  0005  3180               	pagesel	$
  1015  0006  0020               	movlb	0	; select bank0
  1016  0007  087F               	movf	127,w
  1017  0008  00AE               	movwf	??_ISR
  1018                           
  1019                           ;lab03.c: 248: if (TMR0IE && TMR0IF)
  1020  0009  1A8B               	btfsc	11,5	;volatile
  1021  000A  1D0B               	btfss	11,2	;volatile
  1022  000B  280E               	goto	i1l108
  1023                           
  1024                           ;lab03.c: 249: {
  1025                           ;lab03.c: 251: Timer0Handler();
  1026  000C  3181  2125         	fcall	_Timer0Handler
  1027  000E                     i1l108:	
  1028                           ;lab03.c: 252: }
  1029                           ;lab03.c: 253: return;
  1030                           
  1031  000E  0020               	movlb	0	; select bank0
  1032  000F  082E               	movf	??_ISR,w
  1033  0010  00FF               	movwf	127
  1034  0011  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1035  0012  0009               	retfie
  1036  0013                     __end_of_ISR:	
  1037                           
  1038                           	psect	text4
  1039  0125                     __ptext4:	
  1040 ;; *************** function _Timer0Handler *****************
  1041 ;; Defined at:
  1042 ;;		line 256 in file "lab03.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;		None
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1059 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1060 ;;Total ram usage:        1 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; Hardware stack levels required when called:    3
  1063 ;; This function calls:
  1064 ;;		_Display
  1065 ;;		i1_reset
  1066 ;; This function is called by:
  1067 ;;		_ISR
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           
  1072                           ;psect for function _Timer0Handler
  1073  0125                     _Timer0Handler:	
  1074                           
  1075                           ;lab03.c: 257: TMR0IF = 0;
  1076                           
  1077                           ;incstack = 0
  1078                           ; Regs used in _Timer0Handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1079  0125  110B               	bcf	11,2	;volatile
  1080                           
  1081                           ;lab03.c: 258: TMR0 = 6;
  1082  0126  3006               	movlw	6
  1083  0127  0020               	movlb	0	; select bank0
  1084  0128  0095               	movwf	21	;volatile
  1085                           
  1086                           ;lab03.c: 259: PORTBbits.RB4 = 0;
  1087  0129  120D               	bcf	13,4	;volatile
  1088                           
  1089                           ;lab03.c: 260: PORTBbits.RB5 = 0;
  1090  012A  128D               	bcf	13,5	;volatile
  1091                           
  1092                           ;lab03.c: 261: PORTBbits.RB6 = 0;
  1093  012B  130D               	bcf	13,6	;volatile
  1094                           
  1095                           ;lab03.c: 262: PORTBbits.RB7 = 0;
  1096  012C  138D               	bcf	13,7	;volatile
  1097                           
  1098                           ;lab03.c: 263: count++;
  1099  012D  3001               	movlw	1
  1100  012E  07A0               	addwf	_count,f
  1101  012F  3000               	movlw	0
  1102  0130  3DA1               	addwfc	_count+1,f
  1103                           
  1104                           ;lab03.c: 264: count_TIME++;
  1105  0131  3001               	movlw	1
  1106  0132  00AD               	movwf	??_Timer0Handler
  1107  0133  082D               	movf	??_Timer0Handler,w
  1108  0134  07A4               	addwf	_count_TIME,f
  1109                           
  1110                           ;lab03.c: 265: if (count_TIME == 10 )
  1111  0135  300A               	movlw	10
  1112  0136  0624               	xorwf	_count_TIME,w
  1113  0137  1D03               	btfss	3,2
  1114  0138  293F               	goto	i1l792
  1115                           
  1116                           ;lab03.c: 266: {
  1117                           ;lab03.c: 267: count_TIME = 0;
  1118  0139  01A4               	clrf	_count_TIME
  1119                           
  1120                           ;lab03.c: 268: time[3] = time[3] + count_WALTERS;
  1121  013A  082B               	movf	_time+3,w
  1122  013B  0726               	addwf	_count_WALTERS,w
  1123  013C  00AD               	movwf	??_Timer0Handler
  1124  013D  082D               	movf	??_Timer0Handler,w
  1125  013E  00AB               	movwf	_time+3
  1126  013F                     i1l792:	
  1127                           
  1128                           ;lab03.c: 269: }
  1129                           ;lab03.c: 270: if (count > 500 && sleep[0] < 20){
  1130  013F  3001               	movlw	1
  1131  0140  0221               	subwf	_count+1,w
  1132  0141  30F5               	movlw	245
  1133  0142  1903               	skipnz
  1134  0143  0220               	subwf	_count,w
  1135  0144  1C03               	skipc
  1136  0145  2956               	goto	i1l800
  1137  0146  3014               	movlw	20
  1138  0147  0222               	subwf	_sleep,w
  1139  0148  1803               	skipnc
  1140  0149  2956               	goto	i1l800
  1141                           
  1142                           ;lab03.c: 271: PORTCbits.RC7 = ~PORTCbits.RC7;
  1143  014A  1003               	clrc
  1144  014B  1F8E               	btfss	14,7	;volatile
  1145  014C  1403               	setc
  1146  014D  1C03               	btfss	3,0
  1147  014E  2952               	goto	u38_20
  1148  014F  0020               	movlb	0	; select bank0
  1149  0150  178E               	bsf	14,7	;volatile
  1150  0151  2954               	goto	i1l798
  1151  0152                     u38_20:	
  1152  0152  0020               	movlb	0	; select bank0
  1153  0153  138E               	bcf	14,7	;volatile
  1154  0154                     i1l798:	
  1155                           
  1156                           ;lab03.c: 272: count = 0;
  1157  0154  01A0               	clrf	_count
  1158  0155  01A1               	clrf	_count+1
  1159  0156                     i1l800:	
  1160                           
  1161                           ;lab03.c: 273: }
  1162                           ;lab03.c: 276: sleep[1] = sleep[1] + count_SLEEPY_WALTERS;
  1163  0156  0823               	movf	_sleep+1,w
  1164  0157  0725               	addwf	_count_SLEEPY_WALTERS,w
  1165  0158  00AD               	movwf	??_Timer0Handler
  1166  0159  082D               	movf	??_Timer0Handler,w
  1167  015A  00A3               	movwf	_sleep+1
  1168                           
  1169                           ;lab03.c: 277: if (sleep[1] >= 250){
  1170  015B  30FA               	movlw	250
  1171  015C  0223               	subwf	_sleep+1,w
  1172  015D  1C03               	skipc
  1173  015E  296C               	goto	i1l810
  1174                           
  1175                           ;lab03.c: 278: sleep[1] = 0;
  1176  015F  01A3               	clrf	_sleep+1
  1177                           
  1178                           ;lab03.c: 279: sleep[0]++;
  1179  0160  3001               	movlw	1
  1180  0161  00AD               	movwf	??_Timer0Handler
  1181  0162  082D               	movf	??_Timer0Handler,w
  1182  0163  07A2               	addwf	_sleep,f
  1183                           
  1184                           ;lab03.c: 280: if (sleep[0] == 250){
  1185  0164  30FA               	movlw	250
  1186  0165  0622               	xorwf	_sleep,w
  1187  0166  1D03               	btfss	3,2
  1188  0167  296C               	goto	i1l810
  1189                           
  1190                           ;lab03.c: 281: sleep[0] = 21;
  1191  0168  3015               	movlw	21
  1192  0169  00AD               	movwf	??_Timer0Handler
  1193  016A  082D               	movf	??_Timer0Handler,w
  1194  016B  00A2               	movwf	_sleep
  1195  016C                     i1l810:	
  1196                           
  1197                           ;lab03.c: 282: }
  1198                           ;lab03.c: 283: }
  1199                           ;lab03.c: 285: select--;
  1200  016C  3001               	movlw	1
  1201  016D  02A7               	subwf	_select,f
  1202                           
  1203                           ;lab03.c: 286: if (select == 0){
  1204  016E  0827               	movf	_select,w
  1205  016F  1D03               	btfss	3,2
  1206  0170  2975               	goto	i1l115
  1207                           
  1208                           ;lab03.c: 287: select = 4;
  1209  0171  3004               	movlw	4
  1210  0172  00AD               	movwf	??_Timer0Handler
  1211  0173  082D               	movf	??_Timer0Handler,w
  1212  0174  00A7               	movwf	_select
  1213  0175                     i1l115:	
  1214                           
  1215                           ;lab03.c: 288: }
  1216                           ;lab03.c: 290: if (sleep[0] >= 20)
  1217  0175  3014               	movlw	20
  1218  0176  0222               	subwf	_sleep,w
  1219  0177  1C03               	skipc
  1220  0178  297C               	goto	i1l818
  1221                           
  1222                           ;lab03.c: 291: {
  1223                           ;lab03.c: 292: reset();
  1224  0179  3182  2289         	fcall	i1_reset
  1225                           
  1226                           ;lab03.c: 293: }
  1227  017B  0008               	return
  1228  017C                     i1l818:	
  1229                           
  1230                           ;lab03.c: 295: else{
  1231                           ;lab03.c: 296: if (select == 1){
  1232  017C  0020               	movlb	0	; select bank0
  1233  017D  0327               	decf	_select,w
  1234  017E  1D03               	btfss	3,2
  1235  017F  2982               	goto	i1l822
  1236                           
  1237                           ;lab03.c: 297: PORTBbits.RB7 = 1;
  1238  0180  178D               	bsf	13,7	;volatile
  1239                           
  1240                           ;lab03.c: 298: }
  1241  0181  298F               	goto	i1l830
  1242  0182                     i1l822:	
  1243                           
  1244                           ;lab03.c: 299: else if (select == 2){
  1245  0182  3002               	movlw	2
  1246  0183  0627               	xorwf	_select,w
  1247  0184  1D03               	btfss	3,2
  1248  0185  2988               	goto	i1l826
  1249                           
  1250                           ;lab03.c: 300: PORTBbits.RB6 = 1;
  1251  0186  170D               	bsf	13,6	;volatile
  1252                           
  1253                           ;lab03.c: 301: }
  1254  0187  298F               	goto	i1l830
  1255  0188                     i1l826:	
  1256                           
  1257                           ;lab03.c: 302: else if (select == 3){
  1258  0188  3003               	movlw	3
  1259  0189  0627               	xorwf	_select,w
  1260  018A  1D03               	btfss	3,2
  1261  018B  298E               	goto	i1l122
  1262                           
  1263                           ;lab03.c: 303: PORTBbits.RB5 = 1;
  1264  018C  168D               	bsf	13,5	;volatile
  1265                           
  1266                           ;lab03.c: 304: }
  1267  018D  298F               	goto	i1l830
  1268  018E                     i1l122:	
  1269                           
  1270                           ;lab03.c: 305: else{
  1271                           ;lab03.c: 306: PORTBbits.RB4 = 1;
  1272  018E  160D               	bsf	13,4	;volatile
  1273  018F                     i1l830:	
  1274                           
  1275                           ;lab03.c: 307: }
  1276                           ;lab03.c: 308: Display(time, select);
  1277  018F  0827               	movf	_select,w
  1278  0190  00AD               	movwf	??_Timer0Handler
  1279  0191  082D               	movf	??_Timer0Handler,w
  1280  0192  00FC               	movwf	Display@digit
  1281  0193  3028               	movlw	(low (_time| 0))& (0+255)
  1282  0194  3182  2276         	fcall	_Display
  1283  0196  0008               	return
  1284  0197                     __end_of_Timer0Handler:	
  1285                           ;lab03.c: 310: }
  1286                           ;lab03.c: 311: return;
  1287                           
  1288                           
  1289                           	psect	text5
  1290  0289                     __ptext5:	
  1291 ;; *************** function i1_reset *****************
  1292 ;; Defined at:
  1293 ;;		line 199 in file "lab03.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;		None
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		None
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1311 ;;Total ram usage:        0 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; This function calls:
  1314 ;;		Nothing
  1315 ;; This function is called by:
  1316 ;;		_Timer0Handler
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           
  1321                           ;psect for function i1_reset
  1322  0289                     i1_reset:	
  1323                           
  1324                           ;lab03.c: 203: return;
  1325                           
  1326                           ;incstack = 0
  1327                           ; Regs used in i1_reset: []
  1328  0289  0008               	return
  1329  028A                     __end_ofi1_reset:	
  1330                           
  1331                           	psect	text6
  1332  0276                     __ptext6:	
  1333 ;; *************** function _Display *****************
  1334 ;; Defined at:
  1335 ;;		line 206 in file "lab03.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;  num             1    wreg     PTR unsigned char 
  1338 ;;		 -> time(4), 
  1339 ;;  digit           1   12[COMMON] unsigned char 
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  num             1    0[BANK0 ] PTR unsigned char 
  1342 ;;		 -> time(4), 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1352 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1354 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1355 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1356 ;;Total ram usage:        3 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    2
  1359 ;; This function calls:
  1360 ;;		_set
  1361 ;; This function is called by:
  1362 ;;		_Timer0Handler
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           
  1367                           ;psect for function _Display
  1368  0276                     _Display:	
  1369                           
  1370                           ;incstack = 0
  1371                           ; Regs used in _Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1372                           ;Display@num stored from wreg
  1373  0276  0020               	movlb	0	; select bank0
  1374  0277  00AC               	movwf	Display@num
  1375                           
  1376                           ;lab03.c: 207: set(num[digit-1]);
  1377  0278  087C               	movf	Display@digit,w
  1378  0279  3EFF               	addlw	-1
  1379  027A  072C               	addwf	Display@num,w
  1380  027B  00FD               	movwf	??_Display
  1381  027C  087D               	movf	??_Display,w
  1382  027D  0086               	movwf	6
  1383  027E  0187               	clrf	7
  1384  027F  0801               	movf	1,w
  1385  0280  3180  202E         	fcall	_set
  1386  0282  0008               	return
  1387  0283                     __end_of_Display:	
  1388                           ;lab03.c: 208: return;
  1389                           
  1390                           
  1391                           	psect	text7
  1392  002E                     __ptext7:	
  1393 ;; *************** function _set *****************
  1394 ;; Defined at:
  1395 ;;		line 234 in file "lab03.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  ledValue        1    wreg     const unsigned char 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  ledValue        1   11[COMMON] const unsigned char 
  1400 ;; Return value:  Size  Location     Type
  1401 ;;                  1    wreg      void 
  1402 ;; Registers used:
  1403 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : 0/0
  1406 ;;		On exit  : 0/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1411 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1412 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1413 ;;Total ram usage:        6 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    1
  1416 ;; This function calls:
  1417 ;;		___wmul
  1418 ;; This function is called by:
  1419 ;;		_Display
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           
  1424                           ;psect for function _set
  1425  002E                     _set:	
  1426                           
  1427                           ;incstack = 0
  1428                           ; Regs used in _set: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1429                           ;set@ledValue stored from wreg
  1430  002E  00FB               	movwf	set@ledValue
  1431                           
  1432                           ;lab03.c: 236: PORTCbits.RC0 = segments[ledValue][0];
  1433  002F  087B               	movf	set@ledValue,w
  1434  0030  00F6               	movwf	??_set
  1435  0031  01F7               	clrf	??_set+1
  1436  0032  0876               	movf	??_set,w
  1437  0033  00F0               	movwf	___wmul@multiplier
  1438  0034  0877               	movf	??_set+1,w
  1439  0035  00F1               	movwf	___wmul@multiplier+1
  1440  0036  3007               	movlw	7
  1441  0037  00F2               	movwf	___wmul@multiplicand
  1442  0038  3000               	movlw	0
  1443  0039  00F3               	movwf	___wmul@multiplicand+1
  1444  003A  3182  225B  3180   	fcall	___wmul
  1445  003D  0871               	movf	?___wmul+1,w
  1446  003E  0085               	movwf	5
  1447  003F  0870               	movf	?___wmul,w
  1448  0040  0084               	movwf	4
  1449  0041  30ED               	movlw	low (_segments| (0+32768))
  1450  0042  0784               	addwf	4,f
  1451  0043  3081               	movlw	high (_segments| (0+32768))
  1452  0044  3D85               	addwfc	5,f
  1453  0045  0800               	movf	0,w	;code access
  1454  0046  00F8               	movwf	??_set+2
  1455  0047  0020               	movlb	0	; select bank0
  1456  0048  080E               	movf	14,w	;volatile
  1457  0049  0678               	xorwf	??_set+2,w
  1458  004A  39FE               	andlw	-2
  1459  004B  0678               	xorwf	??_set+2,w
  1460  004C  008E               	movwf	14	;volatile
  1461                           
  1462                           ;lab03.c: 237: PORTCbits.RC1 = segments[ledValue][1];
  1463  004D  087B               	movf	set@ledValue,w
  1464  004E  00F6               	movwf	??_set
  1465  004F  01F7               	clrf	??_set+1
  1466  0050  0876               	movf	??_set,w
  1467  0051  00F0               	movwf	___wmul@multiplier
  1468  0052  0877               	movf	??_set+1,w
  1469  0053  00F1               	movwf	___wmul@multiplier+1
  1470  0054  3007               	movlw	7
  1471  0055  00F2               	movwf	___wmul@multiplicand
  1472  0056  3000               	movlw	0
  1473  0057  00F3               	movwf	___wmul@multiplicand+1
  1474  0058  3182  225B  3180   	fcall	___wmul
  1475  005B  0870               	movf	?___wmul,w
  1476  005C  3E01               	addlw	1
  1477  005D  00F8               	movwf	??_set+2
  1478  005E  3000               	movlw	0
  1479  005F  3D71               	addwfc	?___wmul+1,w
  1480  0060  00F9               	movwf	??_set+3
  1481  0061  30ED               	movlw	low (_segments| (0+32768))
  1482  0062  0778               	addwf	??_set+2,w
  1483  0063  0084               	movwf	4
  1484  0064  3081               	movlw	high (_segments| (0+32768))
  1485  0065  3D79               	addwfc	??_set+3,w
  1486  0066  0085               	movwf	5
  1487  0067  0800               	movf	0,w	;code access
  1488  0068  00FA               	movwf	??_set+4
  1489  0069  0DFA               	rlf	??_set+4,f
  1490  006A  0020               	movlb	0	; select bank0
  1491  006B  080E               	movf	14,w	;volatile
  1492  006C  067A               	xorwf	??_set+4,w
  1493  006D  39FD               	andlw	-3
  1494  006E  067A               	xorwf	??_set+4,w
  1495  006F  008E               	movwf	14	;volatile
  1496                           
  1497                           ;lab03.c: 238: PORTCbits.RC2 = segments[ledValue][2];
  1498  0070  087B               	movf	set@ledValue,w
  1499  0071  00F6               	movwf	??_set
  1500  0072  01F7               	clrf	??_set+1
  1501  0073  0876               	movf	??_set,w
  1502  0074  00F0               	movwf	___wmul@multiplier
  1503  0075  0877               	movf	??_set+1,w
  1504  0076  00F1               	movwf	___wmul@multiplier+1
  1505  0077  3007               	movlw	7
  1506  0078  00F2               	movwf	___wmul@multiplicand
  1507  0079  3000               	movlw	0
  1508  007A  00F3               	movwf	___wmul@multiplicand+1
  1509  007B  3182  225B  3180   	fcall	___wmul
  1510  007E  0870               	movf	?___wmul,w
  1511  007F  3E02               	addlw	2
  1512  0080  00F8               	movwf	??_set+2
  1513  0081  3000               	movlw	0
  1514  0082  3D71               	addwfc	?___wmul+1,w
  1515  0083  00F9               	movwf	??_set+3
  1516  0084  30ED               	movlw	low (_segments| (0+32768))
  1517  0085  0778               	addwf	??_set+2,w
  1518  0086  0084               	movwf	4
  1519  0087  3081               	movlw	high (_segments| (0+32768))
  1520  0088  3D79               	addwfc	??_set+3,w
  1521  0089  0085               	movwf	5
  1522  008A  0800               	movf	0,w	;code access
  1523  008B  00FA               	movwf	??_set+4
  1524  008C  0DFA               	rlf	??_set+4,f
  1525  008D  0DFA               	rlf	??_set+4,f
  1526  008E  0020               	movlb	0	; select bank0
  1527  008F  080E               	movf	14,w	;volatile
  1528  0090  067A               	xorwf	??_set+4,w
  1529  0091  39FB               	andlw	-5
  1530  0092  067A               	xorwf	??_set+4,w
  1531  0093  008E               	movwf	14	;volatile
  1532                           
  1533                           ;lab03.c: 239: PORTCbits.RC3 = segments[ledValue][3];
  1534  0094  087B               	movf	set@ledValue,w
  1535  0095  00F6               	movwf	??_set
  1536  0096  01F7               	clrf	??_set+1
  1537  0097  0876               	movf	??_set,w
  1538  0098  00F0               	movwf	___wmul@multiplier
  1539  0099  0877               	movf	??_set+1,w
  1540  009A  00F1               	movwf	___wmul@multiplier+1
  1541  009B  3007               	movlw	7
  1542  009C  00F2               	movwf	___wmul@multiplicand
  1543  009D  3000               	movlw	0
  1544  009E  00F3               	movwf	___wmul@multiplicand+1
  1545  009F  3182  225B  3180   	fcall	___wmul
  1546  00A2  0870               	movf	?___wmul,w
  1547  00A3  3E03               	addlw	3
  1548  00A4  00F8               	movwf	??_set+2
  1549  00A5  3000               	movlw	0
  1550  00A6  3D71               	addwfc	?___wmul+1,w
  1551  00A7  00F9               	movwf	??_set+3
  1552  00A8  30ED               	movlw	low (_segments| (0+32768))
  1553  00A9  0778               	addwf	??_set+2,w
  1554  00AA  0084               	movwf	4
  1555  00AB  3081               	movlw	high (_segments| (0+32768))
  1556  00AC  3D79               	addwfc	??_set+3,w
  1557  00AD  0085               	movwf	5
  1558  00AE  0800               	movf	0,w	;code access
  1559  00AF  00FA               	movwf	??_set+4
  1560  00B0  0DFA               	rlf	??_set+4,f
  1561  00B1  0DFA               	rlf	??_set+4,f
  1562  00B2  0DFA               	rlf	??_set+4,f
  1563  00B3  0020               	movlb	0	; select bank0
  1564  00B4  080E               	movf	14,w	;volatile
  1565  00B5  067A               	xorwf	??_set+4,w
  1566  00B6  39F7               	andlw	-9
  1567  00B7  067A               	xorwf	??_set+4,w
  1568  00B8  008E               	movwf	14	;volatile
  1569                           
  1570                           ;lab03.c: 240: PORTCbits.RC4 = segments[ledValue][4];
  1571  00B9  087B               	movf	set@ledValue,w
  1572  00BA  00F6               	movwf	??_set
  1573  00BB  01F7               	clrf	??_set+1
  1574  00BC  0876               	movf	??_set,w
  1575  00BD  00F0               	movwf	___wmul@multiplier
  1576  00BE  0877               	movf	??_set+1,w
  1577  00BF  00F1               	movwf	___wmul@multiplier+1
  1578  00C0  3007               	movlw	7
  1579  00C1  00F2               	movwf	___wmul@multiplicand
  1580  00C2  3000               	movlw	0
  1581  00C3  00F3               	movwf	___wmul@multiplicand+1
  1582  00C4  3182  225B  3180   	fcall	___wmul
  1583  00C7  0870               	movf	?___wmul,w
  1584  00C8  3E04               	addlw	4
  1585  00C9  00F8               	movwf	??_set+2
  1586  00CA  3000               	movlw	0
  1587  00CB  3D71               	addwfc	?___wmul+1,w
  1588  00CC  00F9               	movwf	??_set+3
  1589  00CD  30ED               	movlw	low (_segments| (0+32768))
  1590  00CE  0778               	addwf	??_set+2,w
  1591  00CF  0084               	movwf	4
  1592  00D0  3081               	movlw	high (_segments| (0+32768))
  1593  00D1  3D79               	addwfc	??_set+3,w
  1594  00D2  0085               	movwf	5
  1595  00D3  0800               	movf	0,w	;code access
  1596  00D4  00FA               	movwf	??_set+4
  1597  00D5  0EFA               	swapf	??_set+4,f
  1598  00D6  0020               	movlb	0	; select bank0
  1599  00D7  080E               	movf	14,w	;volatile
  1600  00D8  067A               	xorwf	??_set+4,w
  1601  00D9  39EF               	andlw	-17
  1602  00DA  067A               	xorwf	??_set+4,w
  1603  00DB  008E               	movwf	14	;volatile
  1604                           
  1605                           ;lab03.c: 241: PORTCbits.RC5 = segments[ledValue][5];
  1606  00DC  087B               	movf	set@ledValue,w
  1607  00DD  00F6               	movwf	??_set
  1608  00DE  01F7               	clrf	??_set+1
  1609  00DF  0876               	movf	??_set,w
  1610  00E0  00F0               	movwf	___wmul@multiplier
  1611  00E1  0877               	movf	??_set+1,w
  1612  00E2  00F1               	movwf	___wmul@multiplier+1
  1613  00E3  3007               	movlw	7
  1614  00E4  00F2               	movwf	___wmul@multiplicand
  1615  00E5  3000               	movlw	0
  1616  00E6  00F3               	movwf	___wmul@multiplicand+1
  1617  00E7  3182  225B  3180   	fcall	___wmul
  1618  00EA  0870               	movf	?___wmul,w
  1619  00EB  3E05               	addlw	5
  1620  00EC  00F8               	movwf	??_set+2
  1621  00ED  3000               	movlw	0
  1622  00EE  3D71               	addwfc	?___wmul+1,w
  1623  00EF  00F9               	movwf	??_set+3
  1624  00F0  30ED               	movlw	low (_segments| (0+32768))
  1625  00F1  0778               	addwf	??_set+2,w
  1626  00F2  0084               	movwf	4
  1627  00F3  3081               	movlw	high (_segments| (0+32768))
  1628  00F4  3D79               	addwfc	??_set+3,w
  1629  00F5  0085               	movwf	5
  1630  00F6  0800               	movf	0,w	;code access
  1631  00F7  00FA               	movwf	??_set+4
  1632  00F8  0EFA               	swapf	??_set+4,f
  1633  00F9  0DFA               	rlf	??_set+4,f
  1634  00FA  0020               	movlb	0	; select bank0
  1635  00FB  080E               	movf	14,w	;volatile
  1636  00FC  067A               	xorwf	??_set+4,w
  1637  00FD  39DF               	andlw	-33
  1638  00FE  067A               	xorwf	??_set+4,w
  1639  00FF  008E               	movwf	14	;volatile
  1640                           
  1641                           ;lab03.c: 242: PORTCbits.RC6 = segments[ledValue][6];
  1642  0100  087B               	movf	set@ledValue,w
  1643  0101  00F6               	movwf	??_set
  1644  0102  01F7               	clrf	??_set+1
  1645  0103  0876               	movf	??_set,w
  1646  0104  00F0               	movwf	___wmul@multiplier
  1647  0105  0877               	movf	??_set+1,w
  1648  0106  00F1               	movwf	___wmul@multiplier+1
  1649  0107  3007               	movlw	7
  1650  0108  00F2               	movwf	___wmul@multiplicand
  1651  0109  3000               	movlw	0
  1652  010A  00F3               	movwf	___wmul@multiplicand+1
  1653  010B  3182  225B         	fcall	___wmul
  1654  010D  0870               	movf	?___wmul,w
  1655  010E  3E06               	addlw	6
  1656  010F  00F8               	movwf	??_set+2
  1657  0110  3000               	movlw	0
  1658  0111  3D71               	addwfc	?___wmul+1,w
  1659  0112  00F9               	movwf	??_set+3
  1660  0113  30ED               	movlw	low (_segments| (0+32768))
  1661  0114  0778               	addwf	??_set+2,w
  1662  0115  0084               	movwf	4
  1663  0116  3081               	movlw	high (_segments| (0+32768))
  1664  0117  3D79               	addwfc	??_set+3,w
  1665  0118  0085               	movwf	5
  1666  0119  0800               	movf	0,w	;code access
  1667  011A  00FA               	movwf	??_set+4
  1668  011B  0EFA               	swapf	??_set+4,f
  1669  011C  0DFA               	rlf	??_set+4,f
  1670  011D  0DFA               	rlf	??_set+4,f
  1671  011E  0020               	movlb	0	; select bank0
  1672  011F  080E               	movf	14,w	;volatile
  1673  0120  067A               	xorwf	??_set+4,w
  1674  0121  39BF               	andlw	-65
  1675  0122  067A               	xorwf	??_set+4,w
  1676  0123  008E               	movwf	14	;volatile
  1677  0124  0008               	return
  1678  0125                     __end_of_set:	
  1679                           ;lab03.c: 243: return;
  1680                           
  1681                           
  1682                           	psect	text8
  1683  025B                     __ptext8:	
  1684 ;; *************** function ___wmul *****************
  1685 ;; Defined at:
  1686 ;;		line 15 in file "/Applications/microchip/xc8/v1.45/sources/common/Umul16.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  multiplier      2    0[COMMON] unsigned int 
  1689 ;;  multiplicand    2    2[COMMON] unsigned int 
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;  product         2    4[COMMON] unsigned int 
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  2    0[COMMON] unsigned int 
  1694 ;; Registers used:
  1695 ;;		wreg, status,2, status,0
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1704 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1705 ;;Total ram usage:        6 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; This function calls:
  1708 ;;		Nothing
  1709 ;; This function is called by:
  1710 ;;		_set
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           
  1715                           ;psect for function ___wmul
  1716  025B                     ___wmul:	
  1717                           
  1718                           ;incstack = 0
  1719                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1720  025B  01F4               	clrf	___wmul@product
  1721  025C  01F5               	clrf	___wmul@product+1
  1722  025D                     i1l704:	
  1723  025D  1C70               	btfss	___wmul@multiplier,0
  1724  025E  2A63               	goto	i1l128
  1725  025F  0872               	movf	___wmul@multiplicand,w
  1726  0260  07F4               	addwf	___wmul@product,f
  1727  0261  0873               	movf	___wmul@multiplicand+1,w
  1728  0262  3DF5               	addwfc	___wmul@product+1,f
  1729  0263                     i1l128:	
  1730  0263  3001               	movlw	1
  1731  0264                     u32_25:	
  1732  0264  35F2               	lslf	___wmul@multiplicand,f
  1733  0265  0DF3               	rlf	___wmul@multiplicand+1,f
  1734  0266  0B89               	decfsz	9,f
  1735  0267  2A64               	goto	u32_25
  1736  0268  3001               	movlw	1
  1737  0269                     u33_25:	
  1738  0269  36F1               	lsrf	___wmul@multiplier+1,f
  1739  026A  0CF0               	rrf	___wmul@multiplier,f
  1740  026B  0B89               	decfsz	9,f
  1741  026C  2A69               	goto	u33_25
  1742  026D  0870               	movf	___wmul@multiplier,w
  1743  026E  0471               	iorwf	___wmul@multiplier+1,w
  1744  026F  1D03               	btfss	3,2
  1745  0270  2A5D               	goto	i1l704
  1746  0271  0875               	movf	___wmul@product+1,w
  1747  0272  00F1               	movwf	?___wmul+1
  1748  0273  0874               	movf	___wmul@product,w
  1749  0274  00F0               	movwf	?___wmul
  1750  0275  0008               	return
  1751  0276                     __end_of___wmul:	
  1752  007E                     btemp	set	126	;btemp
  1753  007E                     int$flags	set	126
  1754  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    70
    Data        5
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      4      16
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Display@num	PTR unsigned char  size(1) Largest target is 4
		 -> time(BANK0[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _Timer0Handler->_Display
    _Display->_set
    _set->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_Timer0Handler
    _Timer0Handler->_Display

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                              3 BANK0      1     1      0
                     _MCU_initialize
 ---------------------------------------------------------------------------------
 (1) _MCU_initialize                                       0     0      0       0
                              _reset
 ---------------------------------------------------------------------------------
 (2) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  1     1      0    1280
                                              2 BANK0      1     1      0
                      _Timer0Handler
 ---------------------------------------------------------------------------------
 (4) _Timer0Handler                                        1     1      0    1280
                                              1 BANK0      1     1      0
                            _Display
                            i1_reset
 ---------------------------------------------------------------------------------
 (5) i1_reset                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Display                                              3     2      1    1280
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                                _set
 ---------------------------------------------------------------------------------
 (6) _set                                                  6     6      0    1142
                                              6 COMMON     6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     988
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MCU_initialize
     _reset

 _ISR (ROOT)
   _Timer0Handler
     _Display
       _set
         ___wmul
     i1_reset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4      10       5       20.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      1E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      1E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb  7 12:05:57 2018

            __CFG_CP$OFF 0000                       l71 01B4                       l65 01A7  
                     l74 01BD                       l66 01A2      ___wmul@multiplicand 0072  
            __CFG_LVP$ON 0000                      l838 019B                      l872 01D1  
                    l864 01C0                      l856 01B7                      l848 01AC  
                    l866 01C6                      l884 01E7                      l878 01DC  
                    _GIE 005F                      _ISR 0004                      _set 002E  
           __CFG_BORV$LO 0000                      wreg 0009                     ?_ISR 0070  
                   ?_set 0070                     _TMR0 0015   __end_of_MCU_initialize 025B  
           __CFG_WRT$OFF 0000                     _main 0197                     _time 0028  
                   fsr0h 0005                     fsr1h 0007                     indf0 0000  
                   fsr0l 0004                     indf1 0001                     fsr1l 0006  
                   btemp 007E                     start 0013            __CFG_IESO$OFF 0000  
        __end_ofi1_reset 028A            __CFG_MCLRE$ON 0000          __end_of_Display 0283  
                  ??_ISR 002E                    ??_set 0076                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    i1l122 018E                    i1l115 0175  
                  i1l108 000E                    i1l128 0263                    i1l704 025D  
                  i1l800 0156                    i1l810 016C                    i1l830 018F  
                  i1l822 0182                    i1l826 0188                    i1l818 017C  
                  i1l792 013F                    i1l798 0154                    u32_25 0264  
                  u33_25 0269                    u38_20 0152                    _TRISA 008C  
                  _TRISB 008D                    _TRISC 008E            _count_WALTERS 0026  
         __CFG_FCMEN$OFF 0000    __end_of_Timer0Handler 0197                    _count 0020  
                  _reset 0288                    _sleep 0022           __CFG_BOREN$OFF 0000  
        ?_MCU_initialize 0070                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_main 01ED           __CFG_LPBOR$OFF 0000  
                 ??_main 002F           __CFG_PLLEN$OFF 0000                   ?_reset 0070  
         __CFG_ZCDDIS$ON 0000                   _ANSELA 018C                   _ANSELB 018D  
                 _ANSELC 018E                ??i1_reset 0070                   _TMR0IE 005D  
                 _TMR0IF 005A                ??_Display 007D           __CFG_PWRTE$OFF 0000  
                 ___wmul 025B           __CFG_STVREN$ON 0000                   _select 0027  
       __end_of_segments 0233  __end_of__initialization 002A           __pcstackCOMMON 0070  
           __pidataBANK0 0283            __end_of_reset 0289           _OPTION_REGbits 0095  
            set@ledValue 007B                  ??_reset 002F     _count_SLEEPY_WALTERS 0025  
             __pbssBANK0 0020               __pmaintext 0197                  ?___wmul 0070  
        __CFG_PPS1WAY$ON 0000               __pintentry 0004         ??_MCU_initialize 002F  
                _SLRCONA 030C                  _SLRCONB 030D                  _SLRCONC 030E  
                i1_reset 0289               _count_TIME 0024                  _Display 0276  
        __size_of___wmul 001B                  __ptext1 0233                  __ptext2 0288  
                __ptext4 0125                  __ptext5 0289                  __ptext6 0276  
                __ptext7 002E                  __ptext8 025B             __size_of_ISR 000F  
           __size_of_set 00F7     end_of_initialization 002A   __size_of_Timer0Handler 0072  
              _PORTAbits 000C                _PORTBbits 000D                _PORTCbits 000E  
       __CFG_FOSC$INTOSC 0000           __end_of___wmul 0276      start_initialization 0015  
            __end_of_ISR 0013              __end_of_set 0125            _Timer0Handler 0125  
               ??___wmul 0074              __pdataBANK0 0027                ___latbits 0002  
          __pcstackBANK0 002C           ?_Timer0Handler 0070                 ?i1_reset 0070  
               ?_Display 007C           __size_of_reset 0001           ___wmul@product 0074  
      ___wmul@multiplier 0070          ??_Timer0Handler 002D         __size_ofi1_reset 0001  
__size_of_MCU_initialize 0028         __size_of_Display 000D            __size_of_main 0056  
               _segments 01ED                 int$flags 007E                 intlevel1 0000  
      __CFG_CLKOUTEN$OFF 0000               _OSCCONbits 0099             Display@digit 007C  
          __pstringtext1 01ED               Display@num 002C           _MCU_initialize 0233  
